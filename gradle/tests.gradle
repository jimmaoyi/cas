task testCassandra(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "Cassandra")
    useJUnitPlatform {
        includeTags "cassandra"
    }
}

task testCosmosDb(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "CosmosDb") && "COSMOSDB".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.CosmosDbCategory"
    }
}

task testRadius(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "Radius") && "RADIUS".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.RadiusCategory"
    }
}

task testCouchbase(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "Couchbase") && "COUCHBASE".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.CouchbaseCategory"
    }
}

task testCouchDb(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "CouchDb") && "COUCHDB".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags rootProject.ext.couchdb
        includeEngines 'junit-jupiter'
    }
}

task testMySQL(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "MySQL") && "MYSQL".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.MySQLCategory"
    }
}

task testPostgres(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "Postgres") && "POSTGRES".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.PostgresCategory"
    }
}

task testMsSqlServer(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "MsSqlServer") && "MSSQLSERVER".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.MsSqlServerCategory"
    }
}

task testMariaDb(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "MariaDb") && "MARIADB".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.MariaDbCategory"
    }
}

task testDynamoDb(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "DynamoDb") && "DYNAMODB".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.DynamoDbCategory"
    }
}

task testFileSystem(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "FileSystem") && "FILESYSTEM".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.FileSystemCategory"
    }
}

task testIgnite(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "Ignite") && "IGNITE".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.IgniteCategory"
    }
    def list = []
    list.add("--add-exports")
    list.add("java.base/jdk.internal.misc=ALL-UNNAMED")
    list.add("--add-exports")
    list.add("java.base/sun.nio.ch=ALL-UNNAMED")
    jvmArgs = list
}

task testInfluxDb(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "InfluxDb") && "INFLUXDB".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.InfluxDbCategory"
    }
}

task testLdap(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "Ldap") && "LDAP".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.LdapCategory"
    }
}

task testMail(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "Mail") && "MAIL".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.MailCategory"
    }
}

task testRestful(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "RestfulApi") && "RESTFUL".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.RestfulApiCategory"
    }
}

task testMemcached(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "Memcached") && "MEMCACHED".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.MemcachedCategory"
    }
}

task testMongoDb(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "MongoDb") && "MONGODB".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.MongoDbCategory"
    }
}

task testRedis(type: Test) {
    enabled = hasTestsOfCategory(project.sourceSets.test.java.srcDirs, "Redis") && "REDIS".equalsIgnoreCase(rootProject.testCategoryType)
    useJUnitPlatform {
        includeTags "org.apereo.cas.category.RedisCategory"
    }
}

test {
    include "**/*Tests.*"
    useJUnitPlatform {
        excludeTags "org.apereo.cas.category.CassandraCategory",
                "org.apereo.cas.category.CosmosDbCategory",
                "org.apereo.cas.category.CouchbaseCategory",
                "org.apereo.cas.category.DynamoDbCategory",
                "org.apereo.cas.category.FileSystemCategory",
                "org.apereo.cas.category.IgniteCategory",
                "org.apereo.cas.category.InfluxDbCategory",
                "couchdb",
                "org.apereo.cas.category.LdapCategory",
                "org.apereo.cas.category.MailCategory",
                "org.apereo.cas.category.MariaDbCategory",
                "org.apereo.cas.category.MemcachedCategory",
                "org.apereo.cas.category.MongoDbCategory",
                "org.apereo.cas.category.MsSqlServerCategory",
                "org.apereo.cas.category.MySQLCategory",
                "org.apereo.cas.category.PostgresCategory",
                "org.apereo.cas.category.RedisCategory",
                "org.apereo.cas.category.RadiusCategory",
                "org.apereo.cas.category.RestfulApiCategory"
    }
    enabled = "SIMPLE".equalsIgnoreCase(rootProject.testCategoryType) && !Boolean.getBoolean("skipTests")
}

tasks.withType(Test) {
    exclude "**/Abstract*.*", "**/Base*.*", "**/*Suite.*"
    include "**/*Tests.*"
    enabled = enabled && !Boolean.getBoolean("skipTests")
    scanForTestClasses = false
    ignoreFailures = Boolean.getBoolean("ignoreTestFailures")
    maxParallelForks = 4
    failFast = true
    jvmArgs "-Xmx1024m"
    classpath = it.classpath + files("${projectDir}/src/main/resources") + files("${projectDir}/src/test/resources")
    testLogging {
        events = ["FAILED", "STANDARD_OUT"]
        exceptionFormat = "full"
        showStandardStreams = Boolean.getBoolean("showStandardStreams")
        showExceptions = true
        showCauses = true
    }
}

def shouldTest(Set testSrc, String category) {
    !Boolean.getBoolean("skipTests") && category.equalsIgnoreCase(rootProject.testCategoryType) && hasTestsOfCategory(testSrc, category)
}

def hasTestsOfCategory(Set testSrc, String category) {
    def res = srcTagMap.computeIfAbsent(testSrc) {
        def tags = new HashSet()
        testSrc.each { src ->
            try {
                src.eachFileRecurse { file ->
                    if (file ==~ /.*Tests\.\w+/) {
                        file.readLines().parallelStream().forEach() { line ->
                            def m = line =~ /^\s*@Tag\("(\w+)"\)\s*$/
                            if (m) {
                                tags.addAll(m.collect { it[1] })
                            }
                        }
                    }
                }
            } catch ( ignored ) {
            }
        }
        tags
    }
    res.contains(category)
}
